{
  "name": "XSL Coverage",
  "tagline": "Python scripts to compute XSL Coverage",
  "body": "# XSL Coverage\r\nThis project contains some python scripts and a Saxon plugin to be able to\r\ncompute the XSL Coverage of your XSL stylesheets. The coverage is given by HTML\r\nfiles showing the coverage rates, and for each XSL stylesheet involved, the\r\ncovered lines, and what XML sources cover that line.\r\n\r\n## Install the package\r\n### Dependencies\r\nThe package depends on the following software:\r\n\r\n* Saxon: this is the core XSLT used t process the stylesheets. Currently it\r\n  works with Saxon 6.5.5.\r\n* Xerces2: contains some java archives used to be able to process XML documents\r\n  using XInclude\r\n* XML Resolver: java archive by Apache to resolve XML catalogs\r\n* pygments: a python module used to display in HTML prettified source code\r\n\r\n### Install Script\r\nTo install the package, use the standard python setup script provided. It\r\nalso supports the following specific install options, used to build the\r\nclasspath used when java runs saxon to process the stylesheets:\r\n\r\n`--saxon-path`\r\n:       Path where the saxon.jar archive is.\r\n\r\n`--xerces-path`\r\n:       Path where the xercesImpl.jar archive is. This archive is one of the\r\n        archive provided by the Xerces2 bundle.\r\n\r\n`--xml-resolver-path`\r\n:       Path of the xml-resolver.jar provided by the Apache Fundation. Used\r\n        to resolve catalogs.\r\n\r\nWhen a path-option is not used the default path used to build the classpath \r\nis `/usr/share/java`.\r\n\r\nExample:\r\n\r\n```\r\n$ python setup.py install --prefix=/path/to/install\r\n                          --saxon-path=/usr/share/java/saxon-6.5.5\r\n                          --xerces-path=/usr/share/java/xerces-2_11_0\r\n```\r\n\r\n## How to produce the coverage data\r\nOnce installed, several scripts are provided. What you can do:\r\n\r\n1. You can simply call saxon-xslt2, to replace the default saxon-xslt script.\r\n   It works like the original, except that it creates a trace file containing\r\n   the raw information of the XSL stylesheet line processed, and for which XML\r\n   source.\r\n\r\n2. Instead, you can also call runcover to run XSLT on your stylesheet(s) and\r\n   output the trace file in a more consistent way. It calls the saxon-xslt2\r\n   wrapper of saxon, process the stylesheet(s) on your XML document, and it\r\n   outputs some trace files that can be processed on the fly to compute the\r\n   coverage, or that can be processed later. It produces a tracelog file\r\n   containing all the necessary data needed for post-processing by xmlcover.\r\n\r\n   ```\r\n   $ runcover --trace-dir=/path/to/traces [saxon options] \\\r\n              file.xml stylesheet.xsl\r\n   ...\r\n   Write traces to /path/to/traces/16312223507/trace-0001.xml\r\n   ...\r\n   Write Trace log '/path/to/traces/16312223507/tracelog.xml'\r\n   ...\r\n   ```\r\n\r\n3. To compute the coverage from existing trace files, can xmlcover on the\r\n   tracelog file built by runcover. It produces a bunch of HTML files of\r\n   pretty printed XSL stylesheets with coverage information.\r\n\r\n   ```\r\n   $ xmlcover --from-log=/path/to/traces/16312223507/trace.log.xml \\\r\n              --html-dir=/path/to/coverage-report\r\n   ...\r\n   /path/to/coverage-report/coverage_index.html\r\n   ```\r\n\r\n4. The package provides as an example a more sophisticated wrapper to call\r\n   dblatex and produce coverage data. It works like runcover, except that\r\n   it configures and calls dblatex the right way.\r\n   ```\r\n   $ dbcover --trace-dir=/path/to/traces --report [dblatex options] document.xml\r\n   ...\r\n   Write traces to /path/to/traces/16312563508/trace-0001.xml\r\n   ...\r\n   Write Trace log '/path/to/traces/16312563508/tracelog.xml'\r\n   ...\r\n   /path/to/traces/16312563508/coverage_index.html\r\n   ```\r\n\r\n## How to use the coverage data\r\nThe main HTML coverage file is called coverage\\_index.html. Use your prefered\r\nweb browser to view it.\r\n* It contains the list of the XSL file, and their computed coverage.\r\n* There is a link to each XSL file, that gives which lines are covered or not\r\n* For each line covered, clicking on them popup the list of the XML lines that\r\n  originate the call of this XSL line.\r\n\r\n## Example\r\nSee here an example of coverage:\r\n[coverage\\_index.html](https://marsgui.github.io/xslcoverage/example/traces/coverage_index.html \"Coverage Example\")\r\n\r\n## Copyright\r\nSee the COPYRIGHT in the package.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}